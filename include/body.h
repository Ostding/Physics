#ifndef __BODY_H__
#define __BODY_H__

#include "types.h"
#include "vector3.h"
#include "quaternion.h"
#include "matrix3.h"
#include "matrix4.h"

namespace physics
{
  class Primitive;

  class RigidBody
  {
  public:
    //Damp of linear velocity
    ffloat  linearDamp;
    ffloat  powLinerDamp;   

    //Damp of angular velocity
    ffloat  angularDamp;
    ffloat  powAngularDamp;

    //Anisotropic friction
    ffloat  friction;

    //Hold inverse of mass, for divide optimize 
    ffloat  inverseMass;

    //Inertia tensor's inverse
    Matrix3 inverseInertiaTensor;

    //Body's direction
    Quaternion orientation;

    //Position in world space
    Vector3 position;

    //Liner velocity
    Vector3 velocity;

    //Angular velocity
    Vector3 rotation;

    //This matrix used for converting between local space and world space
    Matrix4 transformMatrix;

    //Linear accumulator generated by force
    Vector3 forceAccumulator;

    //Torque accumulator generated by force 
    Vector3 torqueAccumulator;

    //Constant accululator which used to simulate gravity or other constant force
    Vector3 constantAccumulator;

    //Composite acceleration that consist of force generated acceleration and constant acceleration
    Vector3 linearAcceleration;

    //This is recency-weighted average, used to put a body to sleep 
    ffloat motion;
    bool   canSleep;

    //Primitive contain this rigidbody
    Primitive *primitive;

    static ffloat sleepEpsilon;

  public:
    RigidBody(Primitive *primitive);

  public:
    void clearAccumulators();
  };
}

#endif